import os
import argparse
import torch
import numpy as np
from classifier.data_handler import get_data, get_merged


obfuscated = True
batch_size = 4

x_train, y_train, x_test, y_test = get_data(batch_size, obfuscated=obfuscated)
#x_train, y_train, x_test, y_test = get_merged(batch_size)
print("Sum labels: ", y_test.sum())

print("x_train ", len(x_train))
print("x_test ", len(x_test))
num_class = 2

model = torch.nn.Sequential(
    torch.nn.Linear(32, 128),
    torch.nn.ReLU(),
    torch.nn.Linear(128, 256),
    torch.nn.ReLU(),
    torch.nn.Linear(256, num_class),
).cuda()
model.load_state_dict(torch.load(os.path.join("ckpts_clf", "ckpt_clf.p" ))["model_state_dict"])
model.eval()

with torch.no_grad():
    output = model(x_test.cuda())
    output.squeeze_(1)
    y = y_test.cuda()
    _, predicted = torch.max(output, 1)
    correct = (predicted == y).sum().item()

    print(f'acc: {correct / y_test.shape[0]}')
