from sklearn.decomposition import PCA
import os
import argparse
import torch
import numpy as np
from classifier.data_handler import get_data, get_merged
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE
from scipy.stats import gaussian_kde


# ax.set_xlabel('Principal Component 1', fontsize = 15)
# ax.set_ylabel('Principal Component 2', fontsize = 15)
# ax.set_title('2 component PCA', fontsize = 20)

def get_pca_components(x):
	pca = PCA(n_components=2)
	x.squeeze_(1)
	principalComponents = pca.fit_transform(x)
	return principalComponents

def plot_on_axis(ax, data_x, data_y, title, limits, obfuscated=False):
	targets = [1, 0]
	if obfuscated:
		colors = ['m','b']
	else:
		colors = ['r', 'g']

	xmin, xmax, ymin, ymax = limits
	ax.set_xlim([xmin-0.5, xmax+0.5])
	ax.set_ylim([ymin-0.5, ymax+0.5])

	for target, color in zip(targets,colors):
	    indicesToKeep = data_y == target
	    ax.scatter(data_x[indicesToKeep, 0]
	               ,data_x[indicesToKeep, 1]
	               , c = color
	               , s = 15
	               , alpha=0.5)
	ax.legend(["malware", "non-malware"])
	ax.set_title(title)
	ax.grid()



def pca():
	fig = plt.figure(figsize = (14,7))
	ax1 = fig.add_subplot(1,2,1) 
	ax2 = fig.add_subplot(1,2,2)


	fig.suptitle('PCA on 32-dim Seq2Seq program embeddings', fontsize=20)
	batch_size = 4
	x_train_obf, y_train_obf, x_test_obf, y_test_obf = get_data(batch_size, obfuscated=True)
	x_train_nonobf, y_train_nonobf, x_test_nonobf, y_test_nonobf = get_data(batch_size, obfuscated=False)

	num_test = x_test_nonobf.shape[0]
	joined = torch.cat([x_test_nonobf, x_test_obf], dim=0)
	pca_joined = get_pca_components(joined)
	limits = np.min(pca_joined[:,0]), np.max(pca_joined[:,0], axis=0), \
		     np.min(pca_joined[:,1]), np.max(pca_joined[:,1])
	pca_x_nonobf, pca_x_obf = pca_joined[:num_test], pca_joined[num_test:]

	plot_on_axis(ax1, pca_x_nonobf, y_test_nonobf, title="Non-obfuscated",limits=limits, obfuscated=False)
	#pca_x_obf = get_pca_components(x_test_obf)
	plot_on_axis(ax2, pca_x_obf, y_test_obf, title="Obfuscated",limits=limits, obfuscated=True)
	plt.savefig("plots/pca.png")
	plt.show()


def tsne():
	fig = plt.figure(figsize = (14,7))
	ax1 = fig.add_subplot(1,2,1) 
	ax2 = fig.add_subplot(1,2,2)


	fig.suptitle('t-SNE on 32-dim Seq2Seq program embeddings', fontsize=20)
	x_train_obf, y_train_obf, x_test_obf, y_test_obf = get_data(1, obfuscated=True)
	x_train_nonobf, y_train_nonobf, x_test_nonobf, y_test_nonobf = get_data(1, obfuscated=False)
	x_test_nonobf.squeeze_(1)
	x_test_obf.squeeze_(1)
	num_test = x_test_nonobf.shape[0]

	tsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=500)
	joined = torch.cat([x_test_nonobf, x_test_obf], dim=0)
	tsne_joined = tsne.fit_transform(joined)
	limits = np.min(tsne_joined[:,0]), np.max(tsne_joined[:,0], axis=0), \
		     np.min(tsne_joined[:,1]), np.max(tsne_joined[:,1])
	tsne_x_nonobf, tsne_x_obf = tsne_joined[:num_test], tsne_joined[num_test:]

	
	plot_on_axis(ax1, tsne_x_nonobf, y_test_nonobf, title="Non-obfuscated", limits=limits, obfuscated=False)
	plot_on_axis(ax2, tsne_x_obf, y_test_obf, title="Obfuscated", limits=limits, obfuscated=True)

	plt.savefig("plots/tsne.png")


def avrg_l2_norm():
	x_train_obf, y_train_obf, x_test_obf, y_test_obf = get_data(1, obfuscated=True)
	x_train_nonobf, y_train_nonobf, x_test_nonobf, y_test_nonobf = get_data(1, obfuscated=False)
	x_test_nonobf.squeeze_(1)
	x_test_obf.squeeze_(1)
	l2_norm = np.mean(np.linalg.norm(x_test_nonobf-x_test_obf, axis=1, ord=2))
	print("L2 norm: ", l2_norm)


def density_plot(order=2):
	x_train_obf, y_train_obf, x_test_obf, y_test_obf = get_data(1, obfuscated=True)
	x_train_nonobf, y_train_nonobf, x_test_nonobf, y_test_nonobf = get_data(1, obfuscated=False)
	x_test_nonobf.squeeze_(1)
	x_test_obf.squeeze_(1)

	# joined = torch.cat([x_test_nonobf, x_test_obf], dim=0)
	# joined = np.linalg.norm(joined, axis=1, ord=order)
	# mini = np.min(joined) - 0.5
	# maxi = np.max(joined) + 0.5

	data = np.linalg.norm(x_test_nonobf - x_test_obf, axis=1, ord=order) 
	mini = np.min(data) - 0.5
	maxi = np.max(data) + 0.5

	density = gaussian_kde(data)
	xs = np.linspace(mini, maxi, 200)
	#density_nonobf.covariance_factor = lambda : .25
	density._compute_covariance()
	ys = density(xs)
	plt.plot(xs, ys, label="L{} distance (nonobf-obf)".format(order))
	plt.fill_between(xs, ys, alpha = 0.3, color="blue")

	# data_obf = np.linalg.norm(x_test_obf, axis=1, ord=order) 
	# density_obf = gaussian_kde(data_obf)
	# xs = np.linspace(mini, maxi, 200)
	# #density_obf.covariance_factor = lambda : .55
	# density_obf._compute_covariance()
	# ys = density_obf(xs)
	# plt.plot(xs, ys, label="Obfuscated")
	# plt.fill_between(xs, ys, alpha = 0.3, color="orange")

	plt.legend()
	plt.title("Density plot: distance between \nnon-obfuscated and obfuscated embeddings")
	if order == 2:
		plt.xlabel("L2 distance")
	elif order == 1:
		plt.xlabel("L1 distance")
	else:
		raise ValueError("only order=1 and order=2 should be used")

	plt.savefig("plots/density_distl{}.png".format(order))

if __name__ == "__main__":
	density_plot(2)