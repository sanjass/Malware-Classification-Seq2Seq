import pickle
import shutil
import os 
import json
from tqdm import tqdm
import random

random.seed(123)

def copy_files(from_dir, to_dir, list_files):
    if not os.path.exists(to_dir):
        os.makedirs(to_dir)

    for file in tqdm(list_files):
        file = os.path.basename(file)
        shutil.copy2(os.path.join(from_dir, file), os.path.join(to_dir, file))


def get_data_paths_non_obf(path_to_data):
    save_path = os.path.join("data", "clf_pairs.p")
    if os.path.exists(save_path):
        print("Loading saved data...")
        data = pickle.load(open(save_path, "rb"))
    else:
        raise NotImplemetedError(f"the file {save_path} should already exist.")

    list_files = []
    for file_id, label in data:
        list_files.append(os.path.join(path_to_data, file_id + ".ps1"))

    return list_files


def get_data_paths_obf(path_to_data):
    save_path = "data/classifier_obfuscation_map.json"
    if os.path.exists(save_path):
        mapping = json.load(open(save_path,"r"))
    else:
        raise NotImplemetedError(f"the file {save_path} should already exist.")

    list_files = []
    for key, value in mapping.items():
        file = random.choice(mapping[key])
        list_files.append(os.path.join(path_to_data, file))
    return list_files




if __name__ == "__main__":
    # data_path = os.path.join("mount", "final_400k", "data")
    # non_obf_files = get_data_paths_non_obf(data_path)
    # copy_files(data_path, "data/original_scripts", non_obf_files)
    obf_path = os.path.join("mount", "final_400k", "small_obf_ast_token")
    obf_files = get_data_paths_obf(obf_path)
    copy_files(obf_path, "data/obfuscated_scripts", obf_files)


