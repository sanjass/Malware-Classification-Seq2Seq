from classifier.data_handler import get_classifier_data
import pickle
from astrepr.gt_ast import GT_AST
import os
import glob
import numpy as np
import random
import sys
sys.setrecursionlimit(10000)
random.seed(123)



def get_ast_depth(v):
    # one node is zero depth
    depth = -1
    for u in v.out_neighbors():
        depth = max(depth, get_ast_depth(u))
    return depth + 1


def get_ast_features(ast):
    return [ast.num_vertices(), get_ast_depth(ast.vertex(0))]


def transform_data(data, obfuscated=False):
    """Returns two lists: the transformed features and corresponding labels"""
    print("transforming data...")
    new_feat = []
    labels = []
    base_path = "asts_obf" if obfuscated else "asts_original"
    for pair in data:
        id = pair[0]
        label = pair[1]
        filename = os.path.join("data", base_path, str(id)+".p") if not obfuscated else \
                   random.choice(glob.glob(os.path.join("data", base_path, str(id)+"_*")))
        ast = pickle.load(open(filename, "rb"))
        new_feat.append(get_ast_features(ast))
        labels.append(label)

    return new_feat, labels


def get_rf_data(obfuscated=False, test_split=0.3, shuffle_dataset=True):
    postfix = "obf" if obfuscated else "nonobf"
    path = "data/ast_rf_data_{}.p".format(postfix)
    if os.path.exists(path):
        output = pickle.load(open(path, "rb"))
        return output
    data = get_classifier_data()
    indices = list(range(len(data)))
    split = int(np.floor(test_split * len(data)))

    if shuffle_dataset:
        np.random.seed(123)
        np.random.shuffle(indices)
    train_indices, test_indices = indices[split:], indices[:split]

    print("train indices: ", len(train_indices))
    print("test indices: ", len(test_indices))

    train_data = [data[idx] for idx in train_indices]
    test_data = [data[idx] for idx in test_indices]

    train_feat, train_labels = transform_data(train_data, obfuscated)
    test_feat, test_labels = transform_data(test_data, obfuscated)
    output = train_feat, train_labels, test_feat, test_labels

    pickle.dump(output, open(path,"wb"))

    return output




