from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import itertools
from astrepr.get_data import get_rf_data
import numpy as np

# Plot formatting
plt.style.use('fivethirtyeight')
plt.rcParams['font.size'] = 15

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Oranges):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    Source: http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    # Plot the confusion matrix
    plt.figure(figsize = (12, 12))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title, size = 20)
    plt.colorbar(aspect=3)
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45, size = 14)
    plt.yticks(tick_marks, classes, size = 14)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() /1.2
    
    # Labeling the plot
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt), fontsize = 20,
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")
        
    plt.grid(None)
    plt.tight_layout()
    plt.ylabel('True label', size = 20)
    plt.xlabel('Predicted label', size = 20)





def main():

    def evaluate(my_feat, my_labels, obfuscated=False):
        postfix = "obfuscated" if obfuscated else "non-obfuscated"
        # Actual class predictions
        rf_predictions = model.predict(my_feat)
        # Probabilities for each class
        rf_probs = model.predict_proba(my_feat)[:, 1]
        # Calculate roc auc
        roc_value = roc_auc_score(my_labels, rf_probs)
        cm = confusion_matrix(test_labels, rf_predictions)
        plot_confusion_matrix(cm, classes = ["Malware", "Non-malware"],
                              title = 'Random Forest Confusion Matrix - {}'.format(postfix))

        plt.savefig('plots/cm_{}.png'.format(postfix))
        return roc_value

    train, train_labels, test, test_labels = get_rf_data(obfuscated=False)
    _, _, test_obf, test_labels_obf = get_rf_data(obfuscated=True)

    # Create the model with 100 trees
    model = RandomForestClassifier(n_estimators=100, 
                                   bootstrap = True,
                                   max_features = 'sqrt')
    # Fit on training data
    model.fit(train, train_labels)


    print("Roc value test nonobf: ", evaluate(test, test_labels, obfuscated=False))
    print("Roc obf: ", evaluate(test_obf, test_labels_obf, obfuscated=True))

   

if __name__ == "__main__":
    main()