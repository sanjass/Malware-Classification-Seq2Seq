import os
import glob
import torch
import gc

def get_most_recent_ckpt(dir):
    list_of_files = glob.glob(dir+"/ckpt*")
    latest_file = max(list_of_files, key=os.path.getctime)
    return latest_file

def read_file(filepath):
    for enc in ['utf-8', 'utf-16', 'utf-8-sig']:
        try:
            with open(filepath, "r", encoding=enc) as ff:
                contents = ff.read()
                return contents
        except Exception as e:
            if enc == 'utf-8-sig':
                return None
            else:
                continue
    return None


def safe_mkdir(path):
    if not os.path.exists(path):
        os.makedirs(path)
    return path


def remove_all_in_dir(path):
    for file in os.listdir(path):
        # if file.endswith('.png'):
        os.remove(os.path.join(path, file))



def refresh_cuda_memory():
    """
    Re-allocate all cuda memory to help alleviate fragmentation
    """
    # Run a full garbage collect first so any dangling tensors are released
    gc.collect()

    # Then move all tensors to the CPU
    locations = {}
    for obj in gc.get_objects():
        if not isinstance(obj, torch.Tensor):
            continue

        locations[obj] = obj.device
        obj.data = obj.data.cpu()
        if isinstance(obj, torch.nn.Parameter) and obj.grad is not None:
            obj.grad.data = obj.grad.cpu()

    # Now empty the cache to flush the allocator
    torch.cuda.empty_cache()

    # Finally move the tensors back to their associated GPUs
    for tensor, device in locations.items():
        tensor.data = tensor.to(device)
        if isinstance(tensor, torch.nn.Parameter) and tensor.grad is not None:
            tensor.grad.data = tensor.grad.to(device)
